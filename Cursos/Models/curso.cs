//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Cursos.Models
{
    using Cursos.BDConnection;
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Data;
    using System.Data.Entity.Spatial;
    using System.Data.SqlClient;
    using System.Linq;
    using System.Web.Services.Description;

    public partial class curso
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public curso()
        {
            this.cursoUsuario = new HashSet<cursoUsuario>();
        }
    
        public int id { get; set; }
        public string nombre { get; set; }
        public int idModalidad { get; set; }
        public string lugar { get; set; }
        public int horas { get; set; }
        public DateTime fechaIni { get; set; }
        public DateTime fechaTer { get; set; }
        public decimal costo { get; set; }
        public decimal costoPref { get; set; }
        public string urlTemario { get; set; }
        public string requisitos { get; set; }
        public string criterioEval { get; set; }
        public string imgUrl { get; set; }
    
        public virtual modalidad modalidad { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<cursoUsuario> cursoUsuario { get; set; }

        static string cadenaConexion = SQL_DB_Connection.cadenaConexion;

        public List<curso> GetCursos()
        {
            List<curso> listCursos = new List<curso>();
            string sql = "select curso.id, curso.nombre, curso.idModalidad, modalidad.id, " +
                "modalidad.modalidad, curso.lugar, curso.horas, curso.fechaIni, curso.fechaTer, curso.costo, curso.costoPref, " +
                "curso.urlTemario, curso.requisitos, curso.criterioEval, curso.imgUrl from curso " +
                "inner join modalidad on modalidad.id = curso.idModalidad;";
            using (SqlConnection cn = new SqlConnection(cadenaConexion))
            {
                SqlCommand cmd = new SqlCommand(sql, cn);
                cn.Open();

                using (SqlDataReader dr = cmd.ExecuteReader())
                {
                    while (dr.Read())
                    {
                        curso c = new curso();
                        modalidad m = new modalidad();
                        c.id = dr.GetInt32(0);
                        c.nombre = dr.GetString(1);
                        c.idModalidad =dr.GetInt32(2);
                        m.id = dr.GetInt32(3);
                        m.modalidad1= dr.GetString(4);
                        c.modalidad = m;
                        c.lugar = dr.GetString(5);
                        c.horas = dr.GetInt32(6);
                        c.fechaIni = dr.GetDateTime(7);
                        c.fechaTer = dr.GetDateTime(8);
                        c.costo = dr.GetDecimal(9);
                        c.costoPref = dr.GetDecimal(10);
                        c.urlTemario = dr.GetString(11);
                        c.requisitos = dr.GetString(12);
                        c.criterioEval = dr.GetString(13);
                        c.imgUrl = dr.IsDBNull(14) ? null : dr.GetString(14);
                        listCursos.Add(c);
                    }
                }

            }
            return listCursos;
        }

        //Metodo para agregar cursos
        public bool agregarCurso(curso cursosInfo)
        {
            bool registrado;
            string mensaje;
            int i;
            using (SqlConnection cn = new SqlConnection(cadenaConexion))
            {
                SqlCommand cmd = new SqlCommand("SP_registraCurso", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("Nombre", cursosInfo.nombre);
                cmd.Parameters.AddWithValue("Modalidad", cursosInfo.idModalidad);
                cmd.Parameters.AddWithValue("Lugar", cursosInfo.lugar);
                cmd.Parameters.AddWithValue("Horas", cursosInfo.horas);
                cmd.Parameters.AddWithValue("FechaIni", cursosInfo.fechaIni);
                cmd.Parameters.AddWithValue("FechaTer", cursosInfo.fechaTer);
                cmd.Parameters.AddWithValue("Costo", cursosInfo.costo);
                cmd.Parameters.AddWithValue("CostoPref", cursosInfo.costoPref);
                cmd.Parameters.AddWithValue("UrlTemario", cursosInfo.urlTemario);
                cmd.Parameters.AddWithValue("Requisitos", cursosInfo.requisitos);
                cmd.Parameters.AddWithValue("CriterioEval", cursosInfo.criterioEval);
                cmd.Parameters.AddWithValue("ImgUrl", cursosInfo.imgUrl);
                cmd.Parameters.Add("Registrado", SqlDbType.Bit).Direction = ParameterDirection.Output;
                cmd.Parameters.Add("Mensaje", SqlDbType.VarChar, 100).Direction = ParameterDirection.Output;


                cn.Open();
                i = cmd.ExecuteNonQuery();

                registrado = Convert.ToBoolean(cmd.Parameters["Registrado"].Value);
                mensaje = cmd.Parameters["Mensaje"].Value.ToString();
            }

            if (i >= 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        }


        //Metodo para editar cursos
        public bool editaCurso(curso cursosInfo)
        {
            bool editado;
            string mensaje;
            int i;
            using (SqlConnection cn = new SqlConnection(cadenaConexion))
            {
                SqlCommand cmd = new SqlCommand("SP_editaCurso", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("Nombre", cursosInfo.nombre);
                cmd.Parameters.AddWithValue("Modalidad", cursosInfo.modalidad);
                cmd.Parameters.AddWithValue("Lugar", cursosInfo.lugar);
                cmd.Parameters.AddWithValue("Horas", cursosInfo.horas);
                cmd.Parameters.AddWithValue("FechaIni", cursosInfo.fechaIni);
                cmd.Parameters.AddWithValue("FechaTer", cursosInfo.fechaTer);
                cmd.Parameters.AddWithValue("Costo", cursosInfo.costo);
                cmd.Parameters.AddWithValue("CostoPref", cursosInfo.costoPref);
                cmd.Parameters.AddWithValue("UrlTemario", cursosInfo.urlTemario);
                cmd.Parameters.AddWithValue("Requisitos", cursosInfo.requisitos);
                cmd.Parameters.AddWithValue("CriterioEval", cursosInfo.criterioEval);
                cmd.Parameters.AddWithValue("ImgUrl", cursosInfo.imgUrl);
                cmd.Parameters.Add("Editado", SqlDbType.Bit).Direction = ParameterDirection.Output;
                cmd.Parameters.Add("Mensaje", SqlDbType.VarChar, 100).Direction = ParameterDirection.Output;

                cn.Open();
                i = cmd.ExecuteNonQuery();

                editado = Convert.ToBoolean(cmd.Parameters["Editado"].Value);
                mensaje = cmd.Parameters["Mensaje"].Value.ToString();
                cn.Close();
            }

            if (i >= 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        //Metodo para eliminar curso
        public bool eliminarCurso(int id)
        {
            int i;
            using (SqlConnection cn = new SqlConnection(cadenaConexion))
            {
                SqlCommand cmd = new SqlCommand("SP_eliminaCurso", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("Id", id);


                cn.Open();
                i = cmd.ExecuteNonQuery();
                cn.Close();
            }

            if (i >= 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        }


    }
}
