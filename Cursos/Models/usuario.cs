//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Cursos.Models
{
    using Cursos.BDConnection;
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Data;
    using System.Data.Entity.Spatial;
    using System.Data.SqlClient;
    using System.IO;
    using System.Linq;
    using System.Security.Cryptography;
    using System.Text;
    using System.Web;

    public partial class usuario
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public usuario()
        {
            this.cursoUsuario = new HashSet<cursoUsuario>();
            this.estudiante1 = new HashSet<estudiante>();
            this.situacionFiscal = new HashSet<situacionFiscal>();
        }
    
        public int id { get; set; }
        public string nombre { get; set; }
        public string apellido { get; set; }
        public string telefono { get; set; }
        public string email { get; set; }
        public string pass { get; set; }
        public string passConfirm { get; set; }
        public bool estudiante { get; set; }
        public byte[] documentoID { get; set; }
        public int sexo_id { get; set; }
        public int rol_id { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<cursoUsuario> cursoUsuario { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<estudiante> estudiante1 { get; set; }
        public virtual roles roles { get; set; }
        public virtual sexo sexo { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<situacionFiscal> situacionFiscal { get; set; }

        static string cadenaConexion = SQL_DB_Connection.cadenaConexion;

        public List<usuario> GetUsuarios()
        {
            List<usuario> usu = new List<usuario>();

            string sql = "select usuario.id, usuario.nombre, usuario.apellido, usuario.telefono, usuario.email, usuario.pass," +
                " usuario.estudiante, usuario.documentoID, usuario.sexo_id, sexo.id, sexo.sexo1, usuario.rol_id, roles.id, roles.rol " +
                "from usuario inner join sexo on sexo.id = usuario.sexo_id" +
                "inner join roles on roles.id = usuario.rol_id";
            using (SqlConnection cn = new SqlConnection(cadenaConexion))
            {
                SqlCommand cmd = new SqlCommand(sql, cn);
                cn.Open();

                using (SqlDataReader dr = cmd.ExecuteReader())
                {
                    while (dr.Read())
                    {
                        usuario u = new usuario();
                        roles r = new roles();
                        sexo s = new sexo();
                        u.id = dr.GetInt32(0);
                        u.nombre = dr.GetString(1);
                        u.apellido= dr.GetString(2);
                        u.telefono= dr.GetString(3);
                        u.email= dr.GetString(4);
                        u.estudiante = dr.GetBoolean(6);
                        u.documentoID = (byte[])dr["documentoID"];
                        u.sexo_id= dr.GetInt32(8);
                        s.id = dr.GetInt32(9);
                        s.sexo1 = dr.GetString(10);
                        u.sexo = s;
                        u.rol_id= dr.GetInt32(11);
                        r.id = dr.GetInt32(12);
                        r.rol = dr.GetString(13);
                        usu.Add(u);
                    }
                }
            }
            return usu;
        }

        public List<usuario> GetUsuario()
        {
            List<usuario> usu = new List<usuario>();
            usuario usuario = (usuario)HttpContext.Current.Session["usuario"];
            string sql = "select usuario.id, usuario.nombre, usuario.apellido, usuario.telefono, usuario.email, usuario.pass," +
                " usuario.estudiante, usuario.documentoID, usuario.sexo_id, sexo.id, sexo.sexo, usuario.rol_id, roles.id, roles.rol " +
                "from usuario inner join sexo on sexo.id = usuario.sexo_id " +
                "inner join roles on roles.id = usuario.rol_id " +
                "where usuario.id = " + usuario.id + ";";
            using (SqlConnection cn = new SqlConnection(cadenaConexion))
            {
                SqlCommand cmd = new SqlCommand(sql, cn);
                cn.Open();

                using (SqlDataReader dr = cmd.ExecuteReader())
                {
                    while (dr.Read())
                    {
                        usuario u = new usuario();
                        roles r = new roles();
                        sexo s = new sexo();
                        u.id = dr.GetInt32(0);
                        u.nombre = dr.GetString(1);
                        u.apellido = dr.GetString(2);
                        u.telefono = dr.GetString(3);
                        u.email = dr.GetString(4);
                        u.estudiante = dr.GetBoolean(6);
                        if (!dr.IsDBNull(dr.GetOrdinal("documentoID")))
                        {
                            u.documentoID = (byte[])dr["documentoID"];
                        }
                        u.sexo_id = dr.GetInt32(8);
                        s.id = dr.GetInt32(9);
                        s.sexo1 = dr.GetString(10);
                        u.sexo = s;
                        u.rol_id = dr.GetInt32(11);
                        r.id = dr.GetInt32(12);
                        r.rol = dr.GetString(13);
                        usu.Add(u);
                    }
                }
            }
            return usu;
        }

        //Metodo para agregar usuarios
       /* public bool InsertaUsuario(usuario usuarioInfo, estudiante estudianteInfo, HttpPostedFileBase documento)
        {

            
            MemoryStream ms = new MemoryStream();
            documento.InputStream.CopyTo(ms);
            byte[] bytes = ms.ToArray();
            string data = Convert.ToBase64String(bytes);
            string[] split = data.Split(',');
            if(split.Length > 0)
            {
                byte[] fileByte = Convert.FromBase64String(split[1]);
                data = Convert.ToBase64String(fileByte);
            }



            bool registrado;
            string mensaje;
            int i;
            if (usuarioInfo.pass == usuarioInfo.passConfirm)
            {
                usuarioInfo.pass = EncriptarSha256(usuarioInfo.pass);
            }
            else
            {
                return false;
            }

            using (SqlConnection cn = new SqlConnection(cadenaConexion))
            {
                SqlCommand cmd = new SqlCommand("SP_registraUsuario", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("Nombre", usuarioInfo.nombre);
                cmd.Parameters.AddWithValue("Apellido", usuarioInfo.apellido);
                cmd.Parameters.AddWithValue("Telefono", usuarioInfo.telefono);
                cmd.Parameters.AddWithValue("Email", usuarioInfo.email);
                cmd.Parameters.AddWithValue("Pass", usuarioInfo.pass);
                if(usuarioInfo.estudiante == true)
                {
                    cmd.Parameters.AddWithValue("Estudiante", 1);
                }
                else
                {
                    cmd.Parameters.AddWithValue("Estudiante", 0);
                }
                if (usuarioInfo.documento == null)
                {
                    cmd.Parameters.AddWithValue("Documento", DBNull.Value);
                }
                else
                {
                    cmd.Parameters.AddWithValue("Documento", data);
                }
                cmd.Parameters.AddWithValue("Sexo", usuarioInfo.sexo_id);
                cmd.Parameters.AddWithValue("Rol", usuarioInfo.rol_id);
                
                cmd.Parameters.Add("Registrado", SqlDbType.Bit).Direction = ParameterDirection.Output;
                cmd.Parameters.Add("Mensaje", SqlDbType.VarChar, 100).Direction = ParameterDirection.Output;

                *//*if(usuarioInfo.estudiante == true)
                {
                    
                    cmd = new SqlCommand("SP_registraEstudiante", cn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("Matricula", estudianteInfo.matricula);
                    cmd.Parameters.AddWithValue("Carrera", estudianteInfo.carrera);
                    cmd.Parameters.AddWithValue("Estudios", estudianteInfo.nivelEstudios);
                    cmd.Parameters.AddWithValue("IdUsuario", usuarioInfo.id);
   
                    cmd.Parameters.Add("Registrado", SqlDbType.Bit).Direction = ParameterDirection.Output;
                    cmd.Parameters.Add("Mensaje", SqlDbType.VarChar, 100).Direction = ParameterDirection.Output;
                }*//*


                cn.Open();
                i = cmd.ExecuteNonQuery();
                registrado = Convert.ToBoolean(cmd.Parameters["Registrado"].Value);
                mensaje = cmd.Parameters["Mensaje"].Value.ToString();
                cn.Close();
            }

            if (i >= 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        }*/

        //Metodo para encriptar password
        public static string EncriptarSha256(String texto)
        {
            StringBuilder sb = new StringBuilder();
            using (SHA256 hash = SHA256Managed.Create())
            {
                Encoding enc = Encoding.UTF8;
                byte[] result = hash.ComputeHash(enc.GetBytes(texto));

                foreach (byte b in result)
                    sb.Append(b.ToString("x2"));
            }
            return sb.ToString();
        }

        //Metodo para editar usuario
        public bool EditarUsuario(usuario usuarioInfo)
        {

            bool editado;
            string mensaje;
            int i;
            if (usuarioInfo.pass == usuarioInfo.passConfirm)
            {
                usuarioInfo.pass = EncriptarSha256(usuarioInfo.pass);

            }
            else
            {
                return false;
            }

            using (SqlConnection cn = new SqlConnection(cadenaConexion))
            {
                SqlCommand cmd = new SqlCommand("SP_editaUsuario", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("Id", usuarioInfo.id);
                cmd.Parameters.AddWithValue("Rol", usuarioInfo.rol_id);
                cmd.Parameters.AddWithValue("Nombre", usuarioInfo.nombre);
                cmd.Parameters.AddWithValue("Apellido", usuarioInfo.apellido);
                cmd.Parameters.AddWithValue("Email", usuarioInfo.email);
                cmd.Parameters.AddWithValue("Pass", usuarioInfo.pass);
                cmd.Parameters.Add("Registrado", SqlDbType.Bit).Direction = ParameterDirection.Output;
                cmd.Parameters.Add("Mensaje", SqlDbType.VarChar, 100).Direction = ParameterDirection.Output;

                cn.Open();
                i = cmd.ExecuteNonQuery();
                editado = Convert.ToBoolean(cmd.Parameters["Registrado"].Value);
                mensaje = cmd.Parameters["Mensaje"].Value.ToString();
                cn.Close();
            }

            if (i >= 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        }


        //Metodo para eliminar usuario
        public bool eliminarUsuario(int id)
        {
            int i;
            using (SqlConnection cn = new SqlConnection(cadenaConexion))
            {
                SqlCommand cmd = new SqlCommand("SP_eliminaUsuario", cn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("Id", id);

                cn.Open();
                i = cmd.ExecuteNonQuery();
                cn.Close();
            }

            if (i >= 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
    }
}
